// Code generated by "esc -modtime 12345 -prefix openapi/ -pkg openapi -ignore .go -o openapi/assets.go ."; DO NOT EDIT.

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/asset-gen.sh": {
		local:   "asset-gen.sh",
		size:    238,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0zKz0rEMBDH8Xue4rfTnBbSsP45LR5EfAHrTUTWdpIO0hlJIgjiu0sr6M5l4PP9dbv4
Khrr7NztMNw/vgwPdzf+4JIVCERB/s8p7o+YzAGAJOzwhDDBC56PaDPrFtYbTZvoB2+QxG2fx9lAmZXL
qYlmpGILvNBvrSPCYlOThUGHi8ura0J4L5zkE+S/pOv28Tuu9pb/gRAkqxVGnw3BzqanWrnVPhuBenKT
KbufAAAA//9BiTev7gAAAA==
`,
	},

	"/index.html": {
		local:   "openapi/index.html",
		size:    636,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0ySQW/bMAyF7/kVjC+9RJaHDtiQyd6wpceuQ9DLblUk2lYrS55IpzC2/ffBUdLlRr4n
fXwgqNa7h2+PP3/cQc+Db1ZqLcTq+8Pj3Rb2U4CnQb8gaCJk0WEQvyZM8xO4FuY4QTbDDKbXoUMCjsC9
I2idx/VKiGalMhZA9ajtUgAoduyxub/dfYU97qJRMivZHZD1QkyEXBcTt+JjIa+9oAesi6PD1zEmLsDE
wBi4Ll6d5b62eHQGxanZgAuOnfaCjPZYvyvOIO/CC/QJ27romUfaStnGwFR2MXYe9eioNHGQhuhzqwfn
5/p+8TElzdvbqtq8r6rNh6r6s4+HyPFaKiChrwvi2SP1iHwZelJyDXCIdobf5wZg0KlzYQvVpzdp1Na6
0F1pfzNHvoGUvKxVLbzznIQ2GqARjZiSr2/iiEGPThJrdkYuRjkP/qZR8vT0Es8kNzJQMv+XYmwon8mi
d8dUBmQZxiF/+uI1I7E8TMF6pCyWxDpY7WPA8pmKZsl6ouawOaOS+Sj+BQAA//8by2IcfAIAAA==
`,
	},

	"/spec.yml": {
		local:   "openapi/spec.yml",
		size:    19021,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/+xcS2/jOBK++1dw1HvYOSRKJ72zgG9O7EkbSDtGEgywM1hgaLEkc0Yi1WQpj27sf19Q
L0uWYkm282hDviQWi8V6fPUgJfkDmV3fTYbkJhLkz4D+DYRqDXjkgTj6GoF6+pNwlzzJiCSD4ok4Syo8
0AQlwSXXxOU+/DTQD9TzQA2JdXp8Yg24cOVwQAhy9GFIrC9n43NrQAgD7SgeIpdiSKwRYVyj4osIgRHk
ARANioMmjCJdUA0k0lx45MvZ3e3vxPUlxV8+EUcGoQKtuRTH5D8yIg4VxOWCERkhCaQCQhfmX7MqoUj+
WCKGQ9sOztji2OO4jBbHXNrBmf3ffz479DORikhB/rjk+DlaJJR6aNsplSODeJYdnP18bHS7B6UTvT4e
nxgjEOJIgdRBYwlCBA0SU5yPyaWUng/kUskotOLRSPlDYuVrmAF97MVk8VKuVFFgf/gp+WsWNvN87oDQ
UFpgFFJnCeQqGSKniSiVFSpa2AtfLuyAagRlX00vJrPbiTVYSo1mmtQY8//36clHa2B8M6e4HBLLpiG3
7z9aA6SeHg6OVnqOz8mMBqBD6kDV+RdSuNyLVOLf8Xk8L6bV1hqXuU8dCEBgCy5hRlvmMvI8BR5Fqdpz
G3lePbsMnVUG43Tk6IEzIG4kHDOgrYF2lhBAbJ/YBdYgpLjUxnG2BnXPHdCJI3IzJE71IIUPIYmBSfo5
qjNxaSi7oKMgoOppSKxLwKqtEyIZgqJG2CkbEisfvwTMKBwpdBTrkK9Cw9DnTjzN/ktLkZGGSrLIaUWq
QIdSaChodnpysvqybmGrMBIblRZpCfmHAndIrA82A5cLHpvfnhXUuUkXXDH6dPJpz+tdggDFnYlSUq0Y
/GvvelXXCU241uDlWbQ8i5URY4SKNbg0oGXE2MuiJaSKBoCgCsRpUC4ke1oZkYvKpapVN2NlxNgNfI1A
47vC6smBYPW5tGd/z/+djv+XMGbgA8J+cD2OeXWGdjLtzdBdsMkayE0dWV1S8DXiCtiQoIogv4xPoeFi
mi3hvSqcE7vFhVUFscqvD+bDSfBrQZN3Jxt7haO6NqqxT8AlrHVU9RGSDx9GqzAvqFNNv++hhLd3Y1rC
udBIhQPJlg1aO/QQqvm8oMxbVPPNcDqcat6mRrcHblqjO6egZN7I9w8gEW0qnK9baBwpFePCbJ67VJyL
1bRnXF+g2FSDioz6YvSOitGOHu7LU1+e3kt52hHKpYK1Tb7qK9dLVC6an/p2KVzPnRXXEGwqW6Xj43r3
B4aor1mvWbN2cm5+Jmp827FulX3dF6++eO2teO2E6VLpapuz5n3deq2jPdvMGO75ZGhqpKA+/7bFJtvM
PZzcZbTpk9cbHiS0xfeOHXoF8dt06QcL/Vrj9XHwituStmGwU62vBEHnet8n/x70e+hpvmebpw63+Dvf
Pshu8ecbNVfJoNMR4xvf9F8Z6ce659/3NlvjfD/nkDHyi6z6EOhD4G3ams4RsI/DjOoZXVvcx1rMe/D3
4O/e3mSPhduOApohvOnMZlx4lnxjU5M9mw466WoeOC5JIDUSGSulCQOXRj4Cq4d2Jt5FLN0P38SPS+q8
RRe/LsGhAr0wYubWPCCdsEwTjlz8BU7qiVAZDCJfOSJGweYcleJ5RbX5OenrMH3HoiDadZFFK7kWUqJG
RcOJoAsfWEXGhZQ+0Bzhrh/pZUvaB8UR9J28kEHA8Up6TRMc8yVqK4qCkHLVmhhBGONct7LyzRp5npcE
DfVSYstVuWDw2G7FaYHUTL+pFbiVT3Nd56C4ZDMqpK5IygWCB4VwcqUKKCYjv3zKri986fx9y7/Bblwi
1wX1a4SR2gejOdW4u1Ymj00eQ66emty4Rj5yEdRM4shxQOsdjTytQKSVj6EdAHd3X917GZ2w6HGNRRNv
zmo3KX1p6ZsSk9b5NnnTq6J0caL5UMZiKag/r7DplIarN9I6CJxsDzY6tK6/7LDC2qMgzW1sZqLsDc9O
6Dk7LYncQc6s/X8hz01T9oUyYnq5X6mDUjXpKKLgdkkVawwlrmO65gh1IpT3oO54TX/QMptx/YWblqV5
sYA+xmLdAk7ZpuUyI3VxG2vob7iWfhwV8eu/DcTfpGjqlx6Ae0tsMhoIFkousIGZrvcqVYoW23aEoBlh
sYlLjBvtbT75u8abJQ2lwjau696j/tgefBnzlc4T92nLFuZ5XcVj1O6m4ZrjNFKEhmKTpCMs7My1jJQD
0yb7pXlzpzbQ8HDdrVmsZC+ZrSgniChIBo+INZ1N76ajq+nv09mllV0c/TaaXo3Oryb5lavJ6LeUouZR
s70U0q3S2lpklOQr3FF8VwJ2qtl1DUyhQzCLtOsSNnZCzz1+8K7sVjwJ6bIrWdHXBkTt4dU2Xf2sOd/F
FzeTFOMzDT5fOtQv/aSE40cat+gAXxRNpW1+be9Y1jTfBzak4/OMrlhc9gSzzzLB1nlZllaOx2YV4TEE
B4Hdxj+lY5AWF0+zP/8sI7VNgv8s99s/UcYUaL1joX7DTmz/Jq4/TN4mJbQ9Yai5OdN5Z1zi8f8AAAD/
/wcVX/5NSgAA
`,
	},

	"/": {
		isDir: true,
		local: "openapi",
	},
}
