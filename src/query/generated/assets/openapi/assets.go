// Code generated by "esc -modtime 12345 -prefix openapi/ -pkg openapi -ignore .go -o openapi/assets.go ."; DO NOT EDIT.

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/asset-gen.sh": {
		local:   "asset-gen.sh",
		size:    238,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0zKz0rEMBDH8Xue4rfTnBbSsP45LR5EfAHrTUTWdpIO0hlJIgjiu0sr6M5l4PP9dbv4
Khrr7NztMNw/vgwPdzf+4JIVCERB/s8p7o+YzAGAJOzwhDDBC56PaDPrFtYbTZvoB2+QxG2fx9lAmZXL
qYlmpGILvNBvrSPCYlOThUGHi8ura0J4L5zkE+S/pOv28Tuu9pb/gRAkqxVGnw3BzqanWrnVPhuBenKT
KbufAAAA//9BiTev7gAAAA==
`,
	},

	"/index.html": {
		local:   "openapi/index.html",
		size:    636,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0ySQW/bMAyF7/kVjC+9RJaHDtiQyd6wpceuQ9DLblUk2lYrS55IpzC2/ffBUdLlRr4n
fXwgqNa7h2+PP3/cQc+Db1ZqLcTq+8Pj3Rb2U4CnQb8gaCJk0WEQvyZM8xO4FuY4QTbDDKbXoUMCjsC9
I2idx/VKiGalMhZA9ajtUgAoduyxub/dfYU97qJRMivZHZD1QkyEXBcTt+JjIa+9oAesi6PD1zEmLsDE
wBi4Ll6d5b62eHQGxanZgAuOnfaCjPZYvyvOIO/CC/QJ27romUfaStnGwFR2MXYe9eioNHGQhuhzqwfn
5/p+8TElzdvbqtq8r6rNh6r6s4+HyPFaKiChrwvi2SP1iHwZelJyDXCIdobf5wZg0KlzYQvVpzdp1Na6
0F1pfzNHvoGUvKxVLbzznIQ2GqARjZiSr2/iiEGPThJrdkYuRjkP/qZR8vT0Es8kNzJQMv+XYmwon8mi
d8dUBmQZxiF/+uI1I7E8TMF6pCyWxDpY7WPA8pmKZsl6ouawOaOS+Sj+BQAA//8by2IcfAIAAA==
`,
	},

	"/spec.yml": {
		local:   "openapi/spec.yml",
		size:    18767,
		modtime: 12345,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "openapi",
	},
}
