// Code generated by "esc -modtime 12345 -prefix openapi/ -pkg openapi -ignore .go -o openapi/assets.go ."; DO NOT EDIT.

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/asset-gen.sh": {
		local:   "asset-gen.sh",
		size:    238,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0zKz0rEMBDH8Xue4rfTnBbSsP45LR5EfAHrTUTWdpIO0hlJIgjiu0sr6M5l4PP9dbv4
Khrr7NztMNw/vgwPdzf+4JIVCERB/s8p7o+YzAGAJOzwhDDBC56PaDPrFtYbTZvoB2+QxG2fx9lAmZXL
qYlmpGILvNBvrSPCYlOThUGHi8ura0J4L5zkE+S/pOv28Tuu9pb/gRAkqxVGnw3BzqanWrnVPhuBenKT
KbufAAAA//9BiTev7gAAAA==
`,
	},

	"/index.html": {
		local:   "openapi/index.html",
		size:    636,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0ySQW/bMAyF7/kVjC+9RJaHDtiQyd6wpceuQ9DLblUk2lYrS55IpzC2/ffBUdLlRr4n
fXwgqNa7h2+PP3/cQc+Db1ZqLcTq+8Pj3Rb2U4CnQb8gaCJk0WEQvyZM8xO4FuY4QTbDDKbXoUMCjsC9
I2idx/VKiGalMhZA9ajtUgAoduyxub/dfYU97qJRMivZHZD1QkyEXBcTt+JjIa+9oAesi6PD1zEmLsDE
wBi4Ll6d5b62eHQGxanZgAuOnfaCjPZYvyvOIO/CC/QJ27romUfaStnGwFR2MXYe9eioNHGQhuhzqwfn
5/p+8TElzdvbqtq8r6rNh6r6s4+HyPFaKiChrwvi2SP1iHwZelJyDXCIdobf5wZg0KlzYQvVpzdp1Na6
0F1pfzNHvoGUvKxVLbzznIQ2GqARjZiSr2/iiEGPThJrdkYuRjkP/qZR8vT0Es8kNzJQMv+XYmwon8mi
d8dUBmQZxiF/+uI1I7E8TMF6pCyWxDpY7WPA8pmKZsl6ouawOaOS+Sj+BQAA//8by2IcfAIAAA==
`,
	},

	"/spec.yml": {
		local:   "openapi/spec.yml",
		size:    16016,
		modtime: 12345,
		compressed: `
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
l5A+AAA=
`,
	},

	"/": {
		isDir: true,
		local: "openapi",
	},
}
